These are at best starting points for freeing a software program from its use-value, from productive function and stability. Beyond this ‘tweaking’ there must somehow be a larger picture in which we can conceive of a ‘performative’ software itself as process, as real time events, intensifications of creative relation. A material conception of a software positions it as a stable structure, pre-existing and determining in its interactions, a framework in which relation plays out – transcendent of the surrounding assemblage. But how can the sound proposed by the software ever escape the reality of assemblages of projection and capture – speakers and ears – through which its eventness is actualized? Can we perhaps more radically begin to understand it as co-produced? That is, as a software potentiality that is itself (re) constructed out of the event of its actualization. In this organic approach we might begin to see each event as a gathering or holding together of its surrounding constraints. In each event there is an atomic re-enaction of software relations and potentiality – a re-creation, with inherent opportunity for variation and invention, movement and novelty. Thinking through and exploiting this kind of actualization, capable of an internal recreation of its potentiality, is a re-saturating of software with a virtual that is in itself relationally eventful: composed eventfully, always at a point of unfolding or bifurcating. This, perhaps, is a path towards a minor conception of software, a flight path from the software hegemony, that artists might begin exploit to create a relational, dynamic art event inclusive of computer programming.